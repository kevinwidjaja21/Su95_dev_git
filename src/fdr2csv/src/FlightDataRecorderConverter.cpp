#include "FlightDataRecorderConverter.h"

#include "fmt/core.h"
#include "fmt/ostream.h"

using namespace std;

void FlightDataRecorderConverter::writeHeader(ofstream& out, const string& delimiter) {
  fmt::print(out, "ap_sm.time.dt{}", delimiter);
  fmt::print(out, "ap_sm.time.simulation_time{}", delimiter);
  fmt::print(out, "ap_sm.data.aircraft_position.lat{}", delimiter);
  fmt::print(out, "ap_sm.data.aircraft_position.lon{}", delimiter);
  fmt::print(out, "ap_sm.data.aircraft_position.alt{}", delimiter);
  fmt::print(out, "ap_sm.data.Theta_deg{}", delimiter);
  fmt::print(out, "ap_sm.data.Phi_deg{}", delimiter);
  fmt::print(out, "ap_sm.data.qk_deg_s{}", delimiter);
  fmt::print(out, "ap_sm.data.rk_deg_s{}", delimiter);
  fmt::print(out, "ap_sm.data.pk_deg_s{}", delimiter);
  fmt::print(out, "ap_sm.data.V_ias_kn{}", delimiter);
  fmt::print(out, "ap_sm.data.V_tas_kn{}", delimiter);
  fmt::print(out, "ap_sm.data.V_mach{}", delimiter);
  fmt::print(out, "ap_sm.data.V_gnd_kn{}", delimiter);
  fmt::print(out, "ap_sm.data.alpha_deg{}", delimiter);
  fmt::print(out, "ap_sm.data.beta_deg{}", delimiter);
  fmt::print(out, "ap_sm.data.H_ft{}", delimiter);
  fmt::print(out, "ap_sm.data.H_ind_ft{}", delimiter);
  fmt::print(out, "ap_sm.data.H_radio_ft{}", delimiter);
  fmt::print(out, "ap_sm.data.H_dot_ft_min{}", delimiter);
  fmt::print(out, "ap_sm.data.Psi_magnetic_deg{}", delimiter);
  fmt::print(out, "ap_sm.data.Psi_magnetic_track_deg{}", delimiter);
  fmt::print(out, "ap_sm.data.Psi_true_deg{}", delimiter);
  fmt::print(out, "ap_sm.data.bx_m_s2{}", delimiter);
  fmt::print(out, "ap_sm.data.by_m_s2{}", delimiter);
  fmt::print(out, "ap_sm.data.bz_m_s2{}", delimiter);
  fmt::print(out, "ap_sm.data.nav_valid{}", delimiter);
  fmt::print(out, "ap_sm.data.nav_loc_deg{}", delimiter);
  fmt::print(out, "ap_sm.data.nav_dme_valid{}", delimiter);
  fmt::print(out, "ap_sm.data.nav_dme_nmi{}", delimiter);
  fmt::print(out, "ap_sm.data.nav_loc_valid{}", delimiter);
  fmt::print(out, "ap_sm.data.nav_loc_magvar_deg{}", delimiter);
  fmt::print(out, "ap_sm.data.nav_loc_error_deg{}", delimiter);
  fmt::print(out, "ap_sm.data.nav_loc_position.lat{}", delimiter);
  fmt::print(out, "ap_sm.data.nav_loc_position.lon{}", delimiter);
  fmt::print(out, "ap_sm.data.nav_loc_position.alt{}", delimiter);
  fmt::print(out, "ap_sm.data.nav_e_loc_valid{}", delimiter);
  fmt::print(out, "ap_sm.data.nav_e_loc_error_deg{}", delimiter);
  fmt::print(out, "ap_sm.data.nav_gs_valid{}", delimiter);
  fmt::print(out, "ap_sm.data.nav_gs_error_deg{}", delimiter);
  fmt::print(out, "ap_sm.data.nav_gs_position.lat{}", delimiter);
  fmt::print(out, "ap_sm.data.nav_gs_position.lon{}", delimiter);
  fmt::print(out, "ap_sm.data.nav_gs_position.alt{}", delimiter);
  fmt::print(out, "ap_sm.data.nav_e_gs_valid{}", delimiter);
  fmt::print(out, "ap_sm.data.nav_e_gs_error_deg{}", delimiter);
  fmt::print(out, "ap_sm.data.flight_guidance_xtk_nmi{}", delimiter);
  fmt::print(out, "ap_sm.data.flight_guidance_tae_deg{}", delimiter);
  fmt::print(out, "ap_sm.data.flight_guidance_phi_deg{}", delimiter);
  fmt::print(out, "ap_sm.data.flight_guidance_phi_limit_deg{}", delimiter);
  fmt::print(out, "ap_sm.data.flight_phase{}", delimiter);
  fmt::print(out, "ap_sm.data.V2_kn{}", delimiter);
  fmt::print(out, "ap_sm.data.VAPP_kn{}", delimiter);
  fmt::print(out, "ap_sm.data.VLS_kn{}", delimiter);
  fmt::print(out, "ap_sm.data.is_flight_plan_available{}", delimiter);
  fmt::print(out, "ap_sm.data.altitude_constraint_ft{}", delimiter);
  fmt::print(out, "ap_sm.data.thrust_reduction_altitude{}", delimiter);
  fmt::print(out, "ap_sm.data.thrust_reduction_altitude_go_around{}", delimiter);
  fmt::print(out, "ap_sm.data.acceleration_altitude{}", delimiter);
  fmt::print(out, "ap_sm.data.acceleration_altitude_engine_out{}", delimiter);
  fmt::print(out, "ap_sm.data.acceleration_altitude_go_around{}", delimiter);
  fmt::print(out, "ap_sm.data.cruise_altitude{}", delimiter);
  fmt::print(out, "ap_sm.data.on_ground{}", delimiter);
  fmt::print(out, "ap_sm.data.zeta_deg{}", delimiter);
  fmt::print(out, "ap_sm.data.throttle_lever_1_pos{}", delimiter);
  fmt::print(out, "ap_sm.data.throttle_lever_2_pos{}", delimiter);
  fmt::print(out, "ap_sm.data.flaps_handle_index{}", delimiter);
  fmt::print(out, "ap_sm.data.total_weight_kg{}", delimiter);
  fmt::print(out, "ap_sm.data_computed.time_since_touchdown{}", delimiter);
  fmt::print(out, "ap_sm.data_computed.time_since_lift_off{}", delimiter);
  fmt::print(out, "ap_sm.data_computed.time_since_SRS{}", delimiter);
  fmt::print(out, "ap_sm.data_computed.H_fcu_in_selection{}", delimiter);
  fmt::print(out, "ap_sm.data_computed.H_constraint_valid{}", delimiter);
  fmt::print(out, "ap_sm.data_computed.Psi_fcu_in_selection{}", delimiter);
  fmt::print(out, "ap_sm.data_computed.gs_convergent_towards_beam{}", delimiter);
  fmt::print(out, "ap_sm.data_computed.V_fcu_in_selection{}", delimiter);
  fmt::print(out, "ap_sm.input.FD_active{}", delimiter);
  fmt::print(out, "ap_sm.input.AP_1_push{}", delimiter);
  fmt::print(out, "ap_sm.input.AP_2_push{}", delimiter);
  fmt::print(out, "ap_sm.input.AP_DISCONNECT_push{}", delimiter);
  fmt::print(out, "ap_sm.input.HDG_push{}", delimiter);
  fmt::print(out, "ap_sm.input.HDG_pull{}", delimiter);
  fmt::print(out, "ap_sm.input.ALT_push{}", delimiter);
  fmt::print(out, "ap_sm.input.ALT_pull{}", delimiter);
  fmt::print(out, "ap_sm.input.VS_push{}", delimiter);
  fmt::print(out, "ap_sm.input.VS_pull{}", delimiter);
  fmt::print(out, "ap_sm.input.LOC_push{}", delimiter);
  fmt::print(out, "ap_sm.input.APPR_push{}", delimiter);
  fmt::print(out, "ap_sm.input.EXPED_push{}", delimiter);
  fmt::print(out, "ap_sm.input.V_c_kn{}", delimiter);
  fmt::print(out, "ap_sm.input.Psi_fcu_deg{}", delimiter);
  fmt::print(out, "ap_sm.input.H_fcu_ft{}", delimiter);
  fmt::print(out, "ap_sm.input.H_constraint_ft{}", delimiter);
  fmt::print(out, "ap_sm.input.H_dot_fcu_fpm{}", delimiter);
  fmt::print(out, "ap_sm.input.FPA_fcu_deg{}", delimiter);
  fmt::print(out, "ap_sm.input.TRK_FPA_mode{}", delimiter);
  fmt::print(out, "ap_sm.input.DIR_TO_trigger{}", delimiter);
  fmt::print(out, "ap_sm.input.is_FLX_active{}", delimiter);
  fmt::print(out, "ap_sm.input.Slew_trigger{}", delimiter);
  fmt::print(out, "ap_sm.input.MACH_mode{}", delimiter);
  fmt::print(out, "ap_sm.input.ATHR_engaged{}", delimiter);
  fmt::print(out, "ap_sm.input.is_SPEED_managed{}", delimiter);
  fmt::print(out, "ap_sm.input.FDR_event{}", delimiter);
  fmt::print(out, "ap_sm.input.FM_requested_vertical_mode{}", delimiter);
  fmt::print(out, "ap_sm.input.FM_H_c_ft{}", delimiter);
  fmt::print(out, "ap_sm.input.FM_H_dot_c_fpm{}", delimiter);
  fmt::print(out, "ap_sm.input.FM_rnav_appr_selected{}", delimiter);
  fmt::print(out, "ap_sm.input.FM_final_des_can_engage{}", delimiter);
  fmt::print(out, "ap_sm.input.TCAS_mode_available{}", delimiter);
  fmt::print(out, "ap_sm.input.TCAS_advisory_state{}", delimiter);
  fmt::print(out, "ap_sm.input.TCAS_advisory_target_min_fpm{}", delimiter);
  fmt::print(out, "ap_sm.input.TCAS_advisory_target_max_fpm{}", delimiter);
  fmt::print(out, "ap_sm.lateral.armed.NAV{}", delimiter);
  fmt::print(out, "ap_sm.lateral.armed.LOC{}", delimiter);
  fmt::print(out, "ap_sm.lateral.condition.NAV{}", delimiter);
  fmt::print(out, "ap_sm.lateral.condition.LOC_CPT{}", delimiter);
  fmt::print(out, "ap_sm.lateral.condition.LOC_TRACK{}", delimiter);
  fmt::print(out, "ap_sm.lateral.condition.LAND{}", delimiter);
  fmt::print(out, "ap_sm.lateral.condition.FLARE{}", delimiter);
  fmt::print(out, "ap_sm.lateral.condition.ROLL_OUT{}", delimiter);
  fmt::print(out, "ap_sm.lateral.condition.GA_TRACK{}", delimiter);
  fmt::print(out, "ap_sm.lateral.output.mode{}", delimiter);
  fmt::print(out, "ap_sm.lateral.output.mode_reversion{}", delimiter);
  fmt::print(out, "ap_sm.lateral.output.mode_reversion_TRK_FPA{}", delimiter);
  fmt::print(out, "ap_sm.lateral.output.law{}", delimiter);
  fmt::print(out, "ap_sm.lateral.output.Psi_c_deg{}", delimiter);
  fmt::print(out, "ap_sm.lateral_previous.armed.NAV{}", delimiter);
  fmt::print(out, "ap_sm.lateral_previous.armed.LOC{}", delimiter);
  fmt::print(out, "ap_sm.lateral_previous.condition.NAV{}", delimiter);
  fmt::print(out, "ap_sm.lateral_previous.condition.LOC_CPT{}", delimiter);
  fmt::print(out, "ap_sm.lateral_previous.condition.LOC_TRACK{}", delimiter);
  fmt::print(out, "ap_sm.lateral_previous.condition.LAND{}", delimiter);
  fmt::print(out, "ap_sm.lateral_previous.condition.FLARE{}", delimiter);
  fmt::print(out, "ap_sm.lateral_previous.condition.ROLL_OUT{}", delimiter);
  fmt::print(out, "ap_sm.lateral_previous.condition.GA_TRACK{}", delimiter);
  fmt::print(out, "ap_sm.lateral_previous.output.mode{}", delimiter);
  fmt::print(out, "ap_sm.lateral_previous.output.mode_reversion{}", delimiter);
  fmt::print(out, "ap_sm.lateral_previous.output.mode_reversion_TRK_FPA{}", delimiter);
  fmt::print(out, "ap_sm.lateral_previous.output.law{}", delimiter);
  fmt::print(out, "ap_sm.lateral_previous.output.Psi_c_deg{}", delimiter);
  fmt::print(out, "ap_sm.vertical.armed.ALT{}", delimiter);
  fmt::print(out, "ap_sm.vertical.armed.ALT_CST{}", delimiter);
  fmt::print(out, "ap_sm.vertical.armed.CLB{}", delimiter);
  fmt::print(out, "ap_sm.vertical.armed.DES{}", delimiter);
  fmt::print(out, "ap_sm.vertical.armed.FINAL_DES{}", delimiter);
  fmt::print(out, "ap_sm.vertical.armed.GS{}", delimiter);
  fmt::print(out, "ap_sm.vertical.armed.TCAS{}", delimiter);
  fmt::print(out, "ap_sm.vertical.condition.ALT{}", delimiter);
  fmt::print(out, "ap_sm.vertical.condition.ALT_CPT{}", delimiter);
  fmt::print(out, "ap_sm.vertical.condition.ALT_CST{}", delimiter);
  fmt::print(out, "ap_sm.vertical.condition.ALT_CST_CPT{}", delimiter);
  fmt::print(out, "ap_sm.vertical.condition.CLB{}", delimiter);
  fmt::print(out, "ap_sm.vertical.condition.DES{}", delimiter);
  fmt::print(out, "ap_sm.vertical.condition.FINAL_DES{}", delimiter);
  fmt::print(out, "ap_sm.vertical.condition.GS_CPT{}", delimiter);
  fmt::print(out, "ap_sm.vertical.condition.GS_TRACK{}", delimiter);
  fmt::print(out, "ap_sm.vertical.condition.LAND{}", delimiter);
  fmt::print(out, "ap_sm.vertical.condition.FLARE{}", delimiter);
  fmt::print(out, "ap_sm.vertical.condition.ROLL_OUT{}", delimiter);
  fmt::print(out, "ap_sm.vertical.condition.SRS{}", delimiter);
  fmt::print(out, "ap_sm.vertical.condition.SRS_GA{}", delimiter);
  fmt::print(out, "ap_sm.vertical.condition.THR_RED{}", delimiter);
  fmt::print(out, "ap_sm.vertical.condition.H_fcu_active{}", delimiter);
  fmt::print(out, "ap_sm.vertical.condition.TCAS{}", delimiter);
  fmt::print(out, "ap_sm.vertical.output.mode{}", delimiter);
  fmt::print(out, "ap_sm.vertical.output.mode_autothrust{}", delimiter);
  fmt::print(out, "ap_sm.vertical.output.mode_reversion{}", delimiter);
  fmt::print(out, "ap_sm.vertical.output.law{}", delimiter);
  fmt::print(out, "ap_sm.vertical.output.H_c_ft{}", delimiter);
  fmt::print(out, "ap_sm.vertical.output.H_dot_c_fpm{}", delimiter);
  fmt::print(out, "ap_sm.vertical.output.FPA_c_deg{}", delimiter);
  fmt::print(out, "ap_sm.vertical.output.V_c_kn{}", delimiter);
  fmt::print(out, "ap_sm.vertical.output.mode_reversion_target_fpm{}", delimiter);
  fmt::print(out, "ap_sm.vertical.output.mode_reversion_TRK_FPA{}", delimiter);
  fmt::print(out, "ap_sm.vertical.output.ALT_soft_mode_active{}", delimiter);
  fmt::print(out, "ap_sm.vertical.output.EXPED_mode_active{}", delimiter);
  fmt::print(out, "ap_sm.vertical.output.FD_disconnect{}", delimiter);
  fmt::print(out, "ap_sm.vertical.output.TCAS_sub_mode{}", delimiter);
  fmt::print(out, "ap_sm.vertical.output.TCAS_sub_mode_compatible{}", delimiter);
  fmt::print(out, "ap_sm.vertical.output.TCAS_message_disarm{}", delimiter);
  fmt::print(out, "ap_sm.vertical.output.TCAS_message_RA_inhibit{}", delimiter);
  fmt::print(out, "ap_sm.vertical.output.TCAS_message_TRK_FPA_deselection{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.armed.ALT{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.armed.ALT_CST{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.armed.CLB{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.armed.DES{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.armed.FINAL_DES{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.armed.GS{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.armed.TCAS{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.condition.ALT{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.condition.ALT_CPT{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.condition.ALT_CST{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.condition.ALT_CST_CPT{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.condition.CLB{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.condition.DES{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.condition.FINAL_DES{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.condition.GS_CPT{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.condition.GS_TRACK{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.condition.LAND{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.condition.FLARE{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.condition.ROLL_OUT{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.condition.SRS{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.condition.SRS_GA{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.condition.THR_RED{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.condition.H_fcu_active{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.condition.TCAS{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.output.mode{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.output.mode_autothrust{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.output.mode_reversion{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.output.law{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.output.H_c_ft{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.output.H_dot_c_fpm{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.output.FPA_c_deg{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.output.V_c_kn{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.output.mode_reversion_target_fpm{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.output.mode_reversion_TRK_FPA{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.output.ALT_soft_mode_active{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.output.EXPED_mode_active{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.output.FD_disconnect{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.output.TCAS_sub_mode{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.output.TCAS_sub_mode_compatible{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.output.TCAS_message_disarm{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.output.TCAS_message_RA_inhibit{}", delimiter);
  fmt::print(out, "ap_sm.vertical_previous.output.TCAS_message_TRK_FPA_deselection{}", delimiter);
  fmt::print(out, "ap_sm.output.enabled_AP1{}", delimiter);
  fmt::print(out, "ap_sm.output.enabled_AP2{}", delimiter);
  fmt::print(out, "ap_sm.output.lateral_law{}", delimiter);
  fmt::print(out, "ap_sm.output.lateral_mode{}", delimiter);
  fmt::print(out, "ap_sm.output.lateral_mode_armed{}", delimiter);
  fmt::print(out, "ap_sm.output.vertical_law{}", delimiter);
  fmt::print(out, "ap_sm.output.vertical_mode{}", delimiter);
  fmt::print(out, "ap_sm.output.vertical_mode_armed{}", delimiter);
  fmt::print(out, "ap_sm.output.mode_reversion_lateral{}", delimiter);
  fmt::print(out, "ap_sm.output.mode_reversion_vertical{}", delimiter);
  fmt::print(out, "ap_sm.output.mode_reversion_vertical_target_fpm{}", delimiter);
  fmt::print(out, "ap_sm.output.mode_reversion_TRK_FPA{}", delimiter);
  fmt::print(out, "ap_sm.output.mode_reversion_triple_click{}", delimiter);
  fmt::print(out, "ap_sm.output.mode_reversion_fma{}", delimiter);
  fmt::print(out, "ap_sm.output.speed_protection_mode{}", delimiter);
  fmt::print(out, "ap_sm.output.autothrust_mode{}", delimiter);
  fmt::print(out, "ap_sm.output.Psi_c_deg{}", delimiter);
  fmt::print(out, "ap_sm.output.H_c_ft{}", delimiter);
  fmt::print(out, "ap_sm.output.H_dot_c_fpm{}", delimiter);
  fmt::print(out, "ap_sm.output.FPA_c_deg{}", delimiter);
  fmt::print(out, "ap_sm.output.V_c_kn{}", delimiter);
  fmt::print(out, "ap_sm.output.ALT_soft_mode_active{}", delimiter);
  fmt::print(out, "ap_sm.output.EXPED_mode_active{}", delimiter);
  fmt::print(out, "ap_sm.output.FD_disconnect{}", delimiter);
  fmt::print(out, "ap_sm.output.TCAS_message_disarm){}", delimiter);
  fmt::print(out, "ap_sm.output.TCAS_message_RA_inhibit){}", delimiter);
  fmt::print(out, "ap_sm.output.TCAS_message_TRK_FPA_deselection){}", delimiter);
  fmt::print(out, "ap_law.ap_on{}", delimiter);
  fmt::print(out, "ap_law.Phi_loc_c{}", delimiter);
  fmt::print(out, "ap_law.Nosewheel_c{}", delimiter);
  fmt::print(out, "ap_law.flight_director.Theta_c_deg{}", delimiter);
  fmt::print(out, "ap_law.flight_director.Phi_c_deg{}", delimiter);
  fmt::print(out, "ap_law.flight_director.Beta_c_deg{}", delimiter);
  fmt::print(out, "ap_law.autopilot.Theta_c_deg{}", delimiter);
  fmt::print(out, "ap_law.autopilot.Phi_c_deg{}", delimiter);
  fmt::print(out, "ap_law.autopilot.Beta_c_deg{}", delimiter);
  fmt::print(out, "ap_law.flare_law.condition_Flare{}", delimiter);
  fmt::print(out, "ap_law.flare_law.H_dot_radio_fpm{}", delimiter);
  fmt::print(out, "ap_law.flare_law.H_dot_c_fpm{}", delimiter);
  fmt::print(out, "ap_law.flare_law.delta_Theta_H_dot_deg{}", delimiter);
  fmt::print(out, "ap_law.flare_law.delta_Theta_bx_deg{}", delimiter);
  fmt::print(out, "ap_law.flare_law.delta_Theta_bz_deg{}", delimiter);
  fmt::print(out, "ap_law.flare_law.delta_Theta_beta_c_deg{}", delimiter);
  fmt::print(out, "athr.data.nz_g{}", delimiter);
  fmt::print(out, "athr.data.Theta_deg{}", delimiter);
  fmt::print(out, "athr.data.Phi_deg{}", delimiter);
  fmt::print(out, "athr.data.V_ias_kn{}", delimiter);
  fmt::print(out, "athr.data.V_tas_kn{}", delimiter);
  fmt::print(out, "athr.data.V_mach{}", delimiter);
  fmt::print(out, "athr.data.V_gnd_kn{}", delimiter);
  fmt::print(out, "athr.data.alpha_deg{}", delimiter);
  fmt::print(out, "athr.data.H_ft{}", delimiter);
  fmt::print(out, "athr.data.H_ind_ft{}", delimiter);
  fmt::print(out, "athr.data.H_radio_ft{}", delimiter);
  fmt::print(out, "athr.data.H_dot_fpm{}", delimiter);
  fmt::print(out, "athr.data.ax_m_s2{}", delimiter);
  fmt::print(out, "athr.data.ay_m_s2{}", delimiter);
  fmt::print(out, "athr.data.az_m_s2{}", delimiter);
  fmt::print(out, "athr.data.bx_m_s2{}", delimiter);
  fmt::print(out, "athr.data.by_m_s2{}", delimiter);
  fmt::print(out, "athr.data.bz_m_s2{}", delimiter);
  fmt::print(out, "athr.data.Psi_magnetic_deg{}", delimiter);
  fmt::print(out, "athr.data.Psi_magnetic_track_deg{}", delimiter);
  fmt::print(out, "athr.data.on_ground{}", delimiter);
  fmt::print(out, "athr.data.flap_handle_index{}", delimiter);
  fmt::print(out, "athr.data.is_engine_operative_1{}", delimiter);
  fmt::print(out, "athr.data.is_engine_operative_2{}", delimiter);
  fmt::print(out, "athr.data.commanded_engine_N1_1_percent{}", delimiter);
  fmt::print(out, "athr.data.commanded_engine_N1_2_percent{}", delimiter);
  fmt::print(out, "athr.data.engine_N1_1_percent{}", delimiter);
  fmt::print(out, "athr.data.engine_N1_2_percent{}", delimiter);
  fmt::print(out, "athr.data.TAT_degC{}", delimiter);
  fmt::print(out, "athr.data.OAT_degC{}", delimiter);
  fmt::print(out, "athr.data.ISA_degC{}", delimiter);
  fmt::print(out, "athr.data.ambient_density_kg_per_m3{}", delimiter);
  fmt::print(out, "athr.data_computed.TLA_in_active_range{}", delimiter);
  fmt::print(out, "athr.data_computed.is_FLX_active{}", delimiter);
  fmt::print(out, "athr.data_computed.ATHR_push{}", delimiter);
  fmt::print(out, "athr.data_computed.ATHR_disabled{}", delimiter);
  fmt::print(out, "athr.data_computed.time_since_touchdown{}", delimiter);
  fmt::print(out, "athr.data_computed.alpha_floor_inhibited{}", delimiter);
  fmt::print(out, "athr.input.ATHR_push{}", delimiter);
  fmt::print(out, "athr.input.ATHR_disconnect{}", delimiter);
  fmt::print(out, "athr.input.is_TCAS_active{}", delimiter);
  fmt::print(out, "athr.input.target_TCAS_RA_rate_fpm{}", delimiter);
  fmt::print(out, "athr.input.TLA_1_deg{}", delimiter);
  fmt::print(out, "athr.input.TLA_2_deg{}", delimiter);
  fmt::print(out, "athr.input.V_c_kn{}", delimiter);
  fmt::print(out, "athr.input.V_LS_kn{}", delimiter);
  fmt::print(out, "athr.input.V_MAX_kn{}", delimiter);
  fmt::print(out, "athr.input.thrust_limit_REV_percent{}", delimiter);
  fmt::print(out, "athr.input.thrust_limit_IDLE_percent{}", delimiter);
  fmt::print(out, "athr.input.thrust_limit_CLB_percent{}", delimiter);
  fmt::print(out, "athr.input.thrust_limit_MCT_percent{}", delimiter);
  fmt::print(out, "athr.input.thrust_limit_FLEX_percent{}", delimiter);
  fmt::print(out, "athr.input.thrust_limit_TOGA_percent{}", delimiter);
  fmt::print(out, "athr.input.flex_temperature_degC{}", delimiter);
  fmt::print(out, "athr.input.mode_requested{}", delimiter);
  fmt::print(out, "athr.input.is_mach_mode_active{}", delimiter);
  fmt::print(out, "athr.input.alpha_floor_condition{}", delimiter);
  fmt::print(out, "athr.input.is_approach_mode_active{}", delimiter);
  fmt::print(out, "athr.input.is_SRS_TO_mode_active{}", delimiter);
  fmt::print(out, "athr.input.is_SRS_GA_mode_active{}", delimiter);
  fmt::print(out, "athr.input.thrust_reduction_altitude{}", delimiter);
  fmt::print(out, "athr.input.thrust_reduction_altitude_go_around{}", delimiter);
  fmt::print(out, "athr.input.is_anti_ice_wing_active{}", delimiter);
  fmt::print(out, "athr.input.is_anti_ice_engine_1_active{}", delimiter);
  fmt::print(out, "athr.input.is_anti_ice_engine_2_active{}", delimiter);
  fmt::print(out, "athr.input.is_air_conditioning_1_active{}", delimiter);
  fmt::print(out, "athr.input.is_air_conditioning_2_active{}", delimiter);
  fmt::print(out, "athr.input.FD_active{}", delimiter);
  fmt::print(out, "athr.input.ATHR_reset_disable{}", delimiter);
  fmt::print(out, "athr.output.sim_throttle_lever_1_pos{}", delimiter);
  fmt::print(out, "athr.output.sim_throttle_lever_2_pos{}", delimiter);
  fmt::print(out, "athr.output.sim_thrust_mode_1{}", delimiter);
  fmt::print(out, "athr.output.sim_thrust_mode_2{}", delimiter);
  fmt::print(out, "athr.output.N1_TLA_1_percent{}", delimiter);
  fmt::print(out, "athr.output.N1_TLA_2_percent{}", delimiter);
  fmt::print(out, "athr.output.is_in_reverse_1{}", delimiter);
  fmt::print(out, "athr.output.is_in_reverse_2{}", delimiter);
  fmt::print(out, "athr.output.thrust_limit_type{}", delimiter);
  fmt::print(out, "athr.output.thrust_limit_percent{}", delimiter);
  fmt::print(out, "athr.output.N1_c_1_percent{}", delimiter);
  fmt::print(out, "athr.output.N1_c_2_percent{}", delimiter);
  fmt::print(out, "athr.output.status{}", delimiter);
  fmt::print(out, "athr.output.mode{}", delimiter);
  fmt::print(out, "athr.output.mode_message{}", delimiter);
  fmt::print(out, "athr.output.thrust_lever_warning_flex{}", delimiter);
  fmt::print(out, "athr.output.thrust_lever_warning_toga{}", delimiter);
  fmt::print(out, "fbw.sim.time.monotonic_time{}", delimiter);
  fmt::print(out, "fbw.sim.time.dt{}", delimiter);
  fmt::print(out, "fbw.sim.time.simulation_time{}", delimiter);
  fmt::print(out, "fbw.sim.time.monotonic_time{}", delimiter);
  fmt::print(out, "fbw.sim.data.nz_g{}", delimiter);
  fmt::print(out, "fbw.sim.data.Theta_deg{}", delimiter);
  fmt::print(out, "fbw.sim.data.Phi_deg{}", delimiter);
  fmt::print(out, "fbw.sim.data.q_deg_s{}", delimiter);
  fmt::print(out, "fbw.sim.data.r_deg_s{}", delimiter);
  fmt::print(out, "fbw.sim.data.p_deg_s{}", delimiter);
  fmt::print(out, "fbw.sim.data.qk_deg_s{}", delimiter);
  fmt::print(out, "fbw.sim.data.rk_deg_s{}", delimiter);
  fmt::print(out, "fbw.sim.data.pk_deg_s{}", delimiter);
  fmt::print(out, "fbw.sim.data.qk_dot_deg_s2{}", delimiter);
  fmt::print(out, "fbw.sim.data.rk_dot_deg_s2{}", delimiter);
  fmt::print(out, "fbw.sim.data.pk_dot_deg_s2{}", delimiter);
  fmt::print(out, "fbw.sim.data.psi_magnetic_deg{}", delimiter);
  fmt::print(out, "fbw.sim.data.psi_true_deg{}", delimiter);
  fmt::print(out, "fbw.sim.data.eta_deg{}", delimiter);
  fmt::print(out, "fbw.sim.data.eta_trim_deg{}", delimiter);
  fmt::print(out, "fbw.sim.data.xi_deg{}", delimiter);
  fmt::print(out, "fbw.sim.data.zeta_deg{}", delimiter);
  fmt::print(out, "fbw.sim.data.zeta_trim_deg{}", delimiter);
  fmt::print(out, "fbw.sim.data.alpha_deg{}", delimiter);
  fmt::print(out, "fbw.sim.data.beta_deg{}", delimiter);
  fmt::print(out, "fbw.sim.data.beta_dot_deg_s{}", delimiter);
  fmt::print(out, "fbw.sim.data.V_ias_kn{}", delimiter);
  fmt::print(out, "fbw.sim.data.V_tas_kn{}", delimiter);
  fmt::print(out, "fbw.sim.data.V_mach{}", delimiter);
  fmt::print(out, "fbw.sim.data.H_ft{}", delimiter);
  fmt::print(out, "fbw.sim.data.H_ind_ft{}", delimiter);
  fmt::print(out, "fbw.sim.data.H_radio_ft{}", delimiter);
  fmt::print(out, "fbw.sim.data.CG_percent_MAC{}", delimiter);
  fmt::print(out, "fbw.sim.data.total_weight_kg{}", delimiter);
  fmt::print(out, "fbw.sim.data.gear_strut_compression_0{}", delimiter);
  fmt::print(out, "fbw.sim.data.gear_strut_compression_1{}", delimiter);
  fmt::print(out, "fbw.sim.data.gear_strut_compression_2{}", delimiter);
  fmt::print(out, "fbw.sim.data.flaps_handle_index{}", delimiter);
  fmt::print(out, "fbw.sim.data.spoilers_left_pos{}", delimiter);
  fmt::print(out, "fbw.sim.data.spoilers_right_pos{}", delimiter);
  fmt::print(out, "fbw.sim.data.autopilot_master_on{}", delimiter);
  fmt::print(out, "fbw.sim.data.slew_on{}", delimiter);
  fmt::print(out, "fbw.sim.data.pause_on{}", delimiter);
  fmt::print(out, "fbw.sim.data.tracking_mode_on_override{}", delimiter);
  fmt::print(out, "fbw.sim.data.autopilot_custom_on{}", delimiter);
  fmt::print(out, "fbw.sim.data.autopilot_custom_Theta_c_deg{}", delimiter);
  fmt::print(out, "fbw.sim.data.autopilot_custom_Phi_c_deg{}", delimiter);
  fmt::print(out, "fbw.sim.data.autopilot_custom_Beta_c_deg{}", delimiter);
  fmt::print(out, "fbw.sim.data.simulation_rate{}", delimiter);
  fmt::print(out, "fbw.sim.data.ice_structure_percent{}", delimiter);
  fmt::print(out, "fbw.sim.data.linear_cl_alpha_per_deg{}", delimiter);
  fmt::print(out, "fbw.sim.data.alpha_stall_deg{}", delimiter);
  fmt::print(out, "fbw.sim.data.alpha_zero_lift_deg{}", delimiter);
  fmt::print(out, "fbw.sim.data.ambient_density_kg_per_m3{}", delimiter);
  fmt::print(out, "fbw.sim.data.ambient_pressure_mbar{}", delimiter);
  fmt::print(out, "fbw.sim.data.ambient_temperature_celsius{}", delimiter);
  fmt::print(out, "fbw.sim.data.ambient_wind_x_kn{}", delimiter);
  fmt::print(out, "fbw.sim.data.ambient_wind_y_kn{}", delimiter);
  fmt::print(out, "fbw.sim.data.ambient_wind_z_kn{}", delimiter);
  fmt::print(out, "fbw.sim.data.ambient_wind_velocity_kn{}", delimiter);
  fmt::print(out, "fbw.sim.data.ambient_wind_direction_deg{}", delimiter);
  fmt::print(out, "fbw.sim.data.total_air_temperature_celsius{}", delimiter);
  fmt::print(out, "fbw.sim.data.latitude_deg{}", delimiter);
  fmt::print(out, "fbw.sim.data.longitude_deg{}", delimiter);
  fmt::print(out, "fbw.sim.data.engine_1_thrust_lbf{}", delimiter);
  fmt::print(out, "fbw.sim.data.engine_2_thrust_lbf{}", delimiter);
  fmt::print(out, "fbw.sim.data.thrust_lever_1_pos{}", delimiter);
  fmt::print(out, "fbw.sim.data.thrust_lever_2_pos{}", delimiter);
  fmt::print(out, "fbw.sim.data_computed.on_ground{}", delimiter);
  fmt::print(out, "fbw.sim.data_computed.tracking_mode_on{}", delimiter);
  fmt::print(out, "fbw.sim.data_computed.high_aoa_prot_active{}", delimiter);
  fmt::print(out, "fbw.sim.data_computed.alpha_floor_command{}", delimiter);
  fmt::print(out, "fbw.sim.data_computed.protection_ap_disc{}", delimiter);
  fmt::print(out, "fbw.sim.data_computed.high_speed_prot_active{}", delimiter);
  fmt::print(out, "fbw.sim.data_computed.high_speed_prot_low_kn{}", delimiter);
  fmt::print(out, "fbw.sim.data_computed.high_speed_prot_high_kn{}", delimiter);
  fmt::print(out, "fbw.sim.data_speeds_aoa.v_alpha_max_kn{}", delimiter);
  fmt::print(out, "fbw.sim.data_speeds_aoa.alpha_max_deg{}", delimiter);
  fmt::print(out, "fbw.sim.data_speeds_aoa.v_alpha_prot_kn{}", delimiter);
  fmt::print(out, "fbw.sim.data_speeds_aoa.alpha_prot_deg{}", delimiter);
  fmt::print(out, "fbw.sim.data_speeds_aoa.alpha_floor_deg{}", delimiter);
  fmt::print(out, "fbw.sim.data_speeds_aoa.alpha_filtered_deg{}", delimiter);
  fmt::print(out, "fbw.sim.input.delta_eta_pos{}", delimiter);
  fmt::print(out, "fbw.sim.input.delta_xi_pos{}", delimiter);
  fmt::print(out, "fbw.sim.input.delta_zeta_pos{}", delimiter);
  fmt::print(out, "fbw.pitch.data_computed.eta_trim_deg_limit_lo{}", delimiter);
  fmt::print(out, "fbw.pitch.data_computed.eta_trim_deg_limit_up{}", delimiter);
  fmt::print(out, "fbw.pitch.data_computed.delta_eta_deg{}", delimiter);
  fmt::print(out, "fbw.pitch.data_computed.in_flight{}", delimiter);
  fmt::print(out, "fbw.pitch.data_computed.in_rotation{}", delimiter);
  fmt::print(out, "fbw.pitch.data_computed.in_flare{}", delimiter);
  fmt::print(out, "fbw.pitch.data_computed.in_flight_gain{}", delimiter);
  fmt::print(out, "fbw.pitch.data_computed.in_rotation_gain{}", delimiter);
  fmt::print(out, "fbw.pitch.data_computed.nz_limit_up_g{}", delimiter);
  fmt::print(out, "fbw.pitch.data_computed.nz_limit_lo_g{}", delimiter);
  fmt::print(out, "fbw.pitch.data_computed.eta_trim_deg_should_freeze{}", delimiter);
  fmt::print(out, "fbw.pitch.data_computed.eta_trim_deg_reset{}", delimiter);
  fmt::print(out, "fbw.pitch.data_computed.eta_trim_deg_reset_deg{}", delimiter);
  fmt::print(out, "fbw.pitch.data_computed.eta_trim_deg_should_write{}", delimiter);
  fmt::print(out, "fbw.pitch.data_computed.eta_trim_deg_rate_limit_up_deg_s{}", delimiter);
  fmt::print(out, "fbw.pitch.data_computed.eta_trim_deg_rate_limit_lo_deg_s{}", delimiter);
  fmt::print(out, "fbw.pitch.data_computed.flare_Theta_deg{}", delimiter);
  fmt::print(out, "fbw.pitch.data_computed.flare_Theta_c_deg{}", delimiter);
  fmt::print(out, "fbw.pitch.data_computed.flare_Theta_c_rate_deg_s{}", delimiter);
  fmt::print(out, "fbw.pitch.law_rotation.qk_c_deg_s{}", delimiter);
  fmt::print(out, "fbw.pitch.law_rotation.eta_deg{}", delimiter);
  fmt::print(out, "fbw.pitch.law_normal.nz_c_g{}", delimiter);
  fmt::print(out, "fbw.pitch.law_normal.Cstar_g{}", delimiter);
  fmt::print(out, "fbw.pitch.law_normal.protection_alpha_c_deg{}", delimiter);
  fmt::print(out, "fbw.pitch.law_normal.protection_V_c_kn{}", delimiter);
  fmt::print(out, "fbw.pitch.law_normal.eta_dot_deg_s{}", delimiter);
  fmt::print(out, "fbw.pitch.vote.eta_dot_deg_s{}", delimiter);
  fmt::print(out, "fbw.pitch.integrated.eta_deg{}", delimiter);
  fmt::print(out, "fbw.pitch.output.eta_deg{}", delimiter);
  fmt::print(out, "fbw.pitch.output.eta_trim_deg{}", delimiter);
  fmt::print(out, "fbw.roll.data_computed.delta_xi_deg{}", delimiter);
  fmt::print(out, "fbw.roll.data_computed.delta_zeta_deg{}", delimiter);
  fmt::print(out, "fbw.roll.data_computed.in_flight{}", delimiter);
  fmt::print(out, "fbw.roll.data_computed.in_flight_gain{}", delimiter);
  fmt::print(out, "fbw.roll.data_computed.zeta_trim_deg_should_write{}", delimiter);
  fmt::print(out, "fbw.roll.data_computed.beta_target_deg{}", delimiter);
  fmt::print(out, "fbw.roll.law_normal.pk_c_deg_s{}", delimiter);
  fmt::print(out, "fbw.roll.law_normal.Phi_c_deg{}", delimiter);
  fmt::print(out, "fbw.roll.law_normal.xi_deg{}", delimiter);
  fmt::print(out, "fbw.roll.law_normal.zeta_deg{}", delimiter);
  fmt::print(out, "fbw.roll.law_normal.zeta_tc_yd_deg{}", delimiter);
  fmt::print(out, "fbw.roll.output.xi_deg{}", delimiter);
  fmt::print(out, "fbw.roll.output.zeta_deg{}", delimiter);
  fmt::print(out, "fbw.roll.output.zeta_trim_deg{}", delimiter);
  fmt::print(out, "fbw.output.eta_pos{}", delimiter);
  fmt::print(out, "fbw.output.eta_trim_deg{}", delimiter);
  fmt::print(out, "fbw.output.eta_trim_deg_should_write{}", delimiter);
  fmt::print(out, "fbw.output.xi_pos{}", delimiter);
  fmt::print(out, "fbw.output.zeta_pos{}", delimiter);
  fmt::print(out, "fbw.output.zeta_trim_pos{}", delimiter);
  fmt::print(out, "fbw.output.zeta_trim_pos_should_write{}", delimiter);
  fmt::print(out, "engine.simOnGround{}", delimiter);
  fmt::print(out, "engine.generalEngineElapsedTime_1{}", delimiter);
  fmt::print(out, "engine.generalEngineElapsedTime_2{}", delimiter);
  fmt::print(out, "engine.standardAtmTemperature{}", delimiter);
  fmt::print(out, "engine.turbineEngineCorrectedFuelFlow_1{}", delimiter);
  fmt::print(out, "engine.turbineEngineCorrectedFuelFlow_2{}", delimiter);
  fmt::print(out, "engine.fuelTankCapacityAuxLeft{}", delimiter);
  fmt::print(out, "engine.fuelTankCapacityAuxRight{}", delimiter);
  fmt::print(out, "engine.fuelTankCapacityMainLeft{}", delimiter);
  fmt::print(out, "engine.fuelTankCapacityMainRight{}", delimiter);
  fmt::print(out, "engine.fuelTankCapacityCenter{}", delimiter);
  fmt::print(out, "engine.fuelTankQuantityAuxLeft{}", delimiter);
  fmt::print(out, "engine.fuelTankQuantityAuxRight{}", delimiter);
  fmt::print(out, "engine.fuelTankQuantityMainLeft{}", delimiter);
  fmt::print(out, "engine.fuelTankQuantityMainRight{}", delimiter);
  fmt::print(out, "engine.fuelTankQuantityCenter{}", delimiter);
  fmt::print(out, "engine.fuelTankQuantityTotal{}", delimiter);
  fmt::print(out, "engine.fuelWeightPerGallon{}", delimiter);
  fmt::print(out, "engine.engineEngine1N2{}", delimiter);
  fmt::print(out, "engine.engineEngine2N2{}", delimiter);
  fmt::print(out, "engine.engineEngine1N1{}", delimiter);
  fmt::print(out, "engine.engineEngine2N1{}", delimiter);
  fmt::print(out, "engine.engineEngineIdleN1{}", delimiter);
  fmt::print(out, "engine.engineEngineIdleN2{}", delimiter);
  fmt::print(out, "engine.engineEngineIdleFF{}", delimiter);
  fmt::print(out, "engine.engineEngineIdleEGT{}", delimiter);
  fmt::print(out, "engine.engineEngine1EGT{}", delimiter);
  fmt::print(out, "engine.engineEngine2EGT{}", delimiter);
  fmt::print(out, "engine.engineEngine1Oil{}", delimiter);
  fmt::print(out, "engine.engineEngine2Oil{}", delimiter);
  fmt::print(out, "engine.engineEngine1TotalOil{}", delimiter);
  fmt::print(out, "engine.engineEngine2TotalOil{}", delimiter);
  fmt::print(out, "engine.engineEngine1FF{}", delimiter);
  fmt::print(out, "engine.engineEngine2FF{}", delimiter);
  fmt::print(out, "engine.engineEngine1PreFF{}", delimiter);
  fmt::print(out, "engine.engineEngine2PreFF{}", delimiter);
  fmt::print(out, "engine.engineEngineImbalance{}", delimiter);
  fmt::print(out, "engine.engineFuelUsedLeft{}", delimiter);
  fmt::print(out, "engine.engineFuelUsedRight{}", delimiter);
  fmt::print(out, "engine.engineFuelLeftPre{}", delimiter);
  fmt::print(out, "engine.engineFuelRightPre{}", delimiter);
  fmt::print(out, "engine.engineFuelAuxLeftPre{}", delimiter);
  fmt::print(out, "engine.engineFuelAuxRightPre{}", delimiter);
  fmt::print(out, "engine.engineFuelCenterPre{}", delimiter);
  fmt::print(out, "engine.engineEngineCycleTime{}", delimiter);
  fmt::print(out, "engine.engineEngine1State{}", delimiter);
  fmt::print(out, "engine.engineEngine2State{}", delimiter);
  fmt::print(out, "engine.engineEngine1Timer{}", delimiter);
  fmt::print(out, "engine.engineEngine2Timer{}", delimiter);
  fmt::print(out, "data.master_warning_active{}", delimiter);
  fmt::print(out, "data.master_caution_active{}", delimiter);
  fmt::print(out, "data.park_brake_lever_pos{}", delimiter);
  fmt::print(out, "data.brake_pedal_left_pos{}", delimiter);
  fmt::print(out, "data.brake_pedal_right_pos{}", delimiter);
  fmt::print(out, "data.brake_left_sim_pos{}", delimiter);
  fmt::print(out, "data.brake_right_sim_pos{}", delimiter);
  fmt::print(out, "data.autobrake_armed_mode{}", delimiter);
  fmt::print(out, "data.autobrake_decel_light{}", delimiter);
  fmt::print(out, "data.spoilers_handle_pos{}", delimiter);
  fmt::print(out, "data.spoilers_armed{}", delimiter);
  fmt::print(out, "data.spoilers_handle_sim_pos{}", delimiter);
  fmt::print(out, "data.ground_spoilers_active{}", delimiter);
  fmt::print(out, "data.flaps_handle_percent{}", delimiter);
  fmt::print(out, "data.flaps_handle_index{}", delimiter);
  fmt::print(out, "data.flaps_handle_configuration_index{}", delimiter);
  fmt::print(out, "data.flaps_handle_sim_index{}", delimiter);
  fmt::print(out, "data.gear_handle_pos{}", delimiter);
  fmt::print(out, "data.hydraulic_green_pressure{}", delimiter);
  fmt::print(out, "data.hydraulic_blue_pressure{}", delimiter);
  fmt::print(out, "data.hydraulic_yellow_pressure{}", delimiter);
  fmt::print(out, "data.throttle_lever_1_pos{}", delimiter);
  fmt::print(out, "data.throttle_lever_2_pos{}", delimiter);
  fmt::print(out, "data.corrected_engine_N1_1_percent{}", delimiter);
  fmt::print(out, "data.corrected_engine_N1_2_percent{}", delimiter);
  fmt::print(out, "data.assistanceTakeoffEnabled{}", delimiter);
  fmt::print(out, "data.assistanceLandingEnabled{}", delimiter);
  fmt::print(out, "data.aiAutoTrimActive{}", delimiter);
  fmt::print(out, "data.aiControlsActive{}", delimiter);
  fmt::print(out, "data.realisticTillerEnabled{}", delimiter);
  fmt::print(out, "data.tillerHandlePosition{}", delimiter);
  fmt::print(out, "data.noseWheelPosition{}", delimiter);
  fmt::print(out, "\n");
}

void FlightDataRecorderConverter::writeStruct(ofstream& out,
                                              const string& delimiter,
                                              const ap_sm_output& ap_sm,
                                              const ap_raw_output& ap_law,
                                              const athr_out& athr,
                                              const fbw_output& fbw,
                                              const EngineData& engine,
                                              const AdditionalData& data) {
  fmt::print(out, "{}{}", ap_sm.time.dt, delimiter);
  fmt::print(out, "{}{}", ap_sm.time.simulation_time, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.aircraft_position.lat, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.aircraft_position.lon, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.aircraft_position.alt, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.Theta_deg, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.Phi_deg, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.qk_deg_s, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.rk_deg_s, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.pk_deg_s, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.V_ias_kn, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.V_tas_kn, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.V_mach, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.V_gnd_kn, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.alpha_deg, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.beta_deg, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.H_ft, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.H_ind_ft, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.H_radio_ft, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.H_dot_ft_min, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.Psi_magnetic_deg, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.Psi_magnetic_track_deg, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.Psi_true_deg, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.bx_m_s2, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.by_m_s2, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.bz_m_s2, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.data.nav_valid), delimiter);
  fmt::print(out, "{}{}", ap_sm.data.nav_loc_deg, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.data.nav_dme_valid), delimiter);
  fmt::print(out, "{}{}", ap_sm.data.nav_dme_nmi, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.data.nav_loc_valid), delimiter);
  fmt::print(out, "{}{}", ap_sm.data.nav_loc_magvar_deg, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.nav_loc_error_deg, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.nav_loc_position.lat, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.nav_loc_position.lon, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.nav_loc_position.alt, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.data.nav_e_loc_valid), delimiter);
  fmt::print(out, "{}{}", ap_sm.data.nav_e_loc_error_deg, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.data.nav_gs_valid), delimiter);
  fmt::print(out, "{}{}", ap_sm.data.nav_gs_error_deg, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.nav_gs_position.lat, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.nav_gs_position.lon, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.nav_gs_position.alt, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.data.nav_e_gs_valid), delimiter);
  fmt::print(out, "{}{}", ap_sm.data.nav_e_gs_error_deg, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.flight_guidance_xtk_nmi, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.flight_guidance_tae_deg, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.flight_guidance_phi_deg, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.flight_guidance_phi_limit_deg, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.flight_phase, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.V2_kn, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.VAPP_kn, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.VLS_kn, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.data.is_flight_plan_available), delimiter);
  fmt::print(out, "{}{}", ap_sm.data.altitude_constraint_ft, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.thrust_reduction_altitude, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.thrust_reduction_altitude_go_around, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.acceleration_altitude, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.acceleration_altitude_engine_out, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.acceleration_altitude_go_around, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.cruise_altitude, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.on_ground, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.zeta_deg, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.throttle_lever_1_pos, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.throttle_lever_2_pos, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.flaps_handle_index, delimiter);
  fmt::print(out, "{}{}", ap_sm.data.total_weight_kg, delimiter);
  fmt::print(out, "{}{}", ap_sm.data_computed.time_since_touchdown, delimiter);
  fmt::print(out, "{}{}", ap_sm.data_computed.time_since_lift_off, delimiter);
  fmt::print(out, "{}{}", ap_sm.data_computed.time_since_SRS, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.data_computed.H_fcu_in_selection), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.data_computed.H_constraint_valid), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.data_computed.Psi_fcu_in_selection), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.data_computed.gs_convergent_towards_beam), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.data_computed.V_fcu_in_selection), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.input.FD_active), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.input.AP_1_push), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.input.AP_2_push), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.input.AP_DISCONNECT_push), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.input.HDG_push), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.input.HDG_pull), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.input.ALT_push), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.input.ALT_pull), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.input.VS_push), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.input.VS_pull), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.input.LOC_push), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.input.APPR_push), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.input.EXPED_push), delimiter);
  fmt::print(out, "{}{}", ap_sm.input.V_fcu_kn, delimiter);
  fmt::print(out, "{}{}", ap_sm.input.Psi_fcu_deg, delimiter);
  fmt::print(out, "{}{}", ap_sm.input.H_fcu_ft, delimiter);
  fmt::print(out, "{}{}", ap_sm.input.H_constraint_ft, delimiter);
  fmt::print(out, "{}{}", ap_sm.input.H_dot_fcu_fpm, delimiter);
  fmt::print(out, "{}{}", ap_sm.input.FPA_fcu_deg, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.input.TRK_FPA_mode), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.input.DIR_TO_trigger), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.input.is_FLX_active), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.input.Slew_trigger), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.input.MACH_mode), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.input.ATHR_engaged), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.input.is_SPEED_managed), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.input.FDR_event), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.input.FM_requested_vertical_mode), delimiter);
  fmt::print(out, "{}{}", ap_sm.input.FM_H_c_ft, delimiter);
  fmt::print(out, "{}{}", ap_sm.input.FM_H_dot_c_fpm, delimiter);
  fmt::print(out, "{}{}", ap_sm.input.FM_rnav_appr_selected, delimiter);
  fmt::print(out, "{}{}", ap_sm.input.FM_final_des_can_engage, delimiter);
  fmt::print(out, "{}{}", ap_sm.input.TCAS_mode_available, delimiter);
  fmt::print(out, "{}{}", ap_sm.input.TCAS_advisory_state, delimiter);
  fmt::print(out, "{}{}", ap_sm.input.TCAS_advisory_target_min_fpm, delimiter);
  fmt::print(out, "{}{}", ap_sm.input.TCAS_advisory_target_max_fpm, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.lateral.armed.NAV), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.lateral.armed.LOC), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.lateral.condition.NAV), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.lateral.condition.LOC_CPT), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.lateral.condition.LOC_TRACK), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.lateral.condition.LAND), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.lateral.condition.FLARE), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.lateral.condition.ROLL_OUT), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.lateral.condition.GA_TRACK), delimiter);
  fmt::print(out, "{}{}", ap_sm.lateral.output.mode, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.lateral.output.mode_reversion), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.lateral.output.mode_reversion_TRK_FPA), delimiter);
  fmt::print(out, "{}{}", ap_sm.lateral.output.law, delimiter);
  fmt::print(out, "{}{}", ap_sm.lateral.output.Psi_c_deg, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.lateral_previous.armed.NAV), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.lateral_previous.armed.LOC), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.lateral_previous.condition.NAV), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.lateral_previous.condition.LOC_CPT), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.lateral_previous.condition.LOC_TRACK), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.lateral_previous.condition.LAND), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.lateral_previous.condition.FLARE), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.lateral_previous.condition.ROLL_OUT), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.lateral_previous.condition.GA_TRACK), delimiter);
  fmt::print(out, "{}{}", ap_sm.lateral_previous.output.mode, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.lateral_previous.output.mode_reversion), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.lateral_previous.output.mode_reversion_TRK_FPA), delimiter);
  fmt::print(out, "{}{}", ap_sm.lateral_previous.output.law, delimiter);
  fmt::print(out, "{}{}", ap_sm.lateral_previous.output.Psi_c_deg, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.armed.ALT), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.armed.ALT_CST), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.armed.CLB), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.armed.DES), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.armed.FINAL_DES), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.armed.GS), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.armed.TCAS), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.condition.ALT), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.condition.ALT_CPT), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.condition.ALT_CST), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.condition.ALT_CST_CPT), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.condition.CLB), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.condition.DES), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.condition.FINAL_DES), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.condition.GS_CPT), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.condition.GS_TRACK), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.condition.LAND), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.condition.FLARE), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.condition.ROLL_OUT), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.condition.SRS), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.condition.SRS_GA), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.condition.THR_RED), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.condition.H_fcu_active), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.condition.TCAS), delimiter);
  fmt::print(out, "{}{}", ap_sm.vertical.output.mode, delimiter);
  fmt::print(out, "{}{}", ap_sm.vertical.output.mode_autothrust, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.output.mode_reversion), delimiter);
  fmt::print(out, "{}{}", ap_sm.vertical.output.law, delimiter);
  fmt::print(out, "{}{}", ap_sm.vertical.output.H_c_ft, delimiter);
  fmt::print(out, "{}{}", ap_sm.vertical.output.H_dot_c_fpm, delimiter);
  fmt::print(out, "{}{}", ap_sm.vertical.output.FPA_c_deg, delimiter);
  fmt::print(out, "{}{}", ap_sm.vertical.output.V_c_kn, delimiter);
  fmt::print(out, "{}{}", ap_sm.vertical.output.mode_reversion_target_fpm, delimiter);
  fmt::print(out, "{}{}", ap_sm.vertical.output.mode_reversion_TRK_FPA, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.output.ALT_soft_mode_active), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.output.EXPED_mode_active), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.output.FD_disconnect), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.output.TCAS_sub_mode), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.output.TCAS_sub_mode_compatible), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.output.TCAS_message_disarm), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.output.TCAS_message_RA_inhibit), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical.output.TCAS_message_TRK_FPA_deselection), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.armed.ALT), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.armed.ALT_CST), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.armed.CLB), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.armed.DES), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.armed.FINAL_DES), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.armed.GS), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.armed.TCAS), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.condition.ALT), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.condition.ALT_CPT), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.condition.ALT_CST), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.condition.ALT_CST_CPT), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.condition.CLB), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.condition.DES), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.condition.FINAL_DES), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.condition.GS_CPT), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.condition.GS_TRACK), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.condition.LAND), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.condition.FLARE), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.condition.ROLL_OUT), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.condition.SRS), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.condition.SRS_GA), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.condition.THR_RED), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.condition.H_fcu_active), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.condition.TCAS), delimiter);
  fmt::print(out, "{}{}", ap_sm.vertical_previous.output.mode, delimiter);
  fmt::print(out, "{}{}", ap_sm.vertical_previous.output.mode_autothrust, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.output.mode_reversion), delimiter);
  fmt::print(out, "{}{}", ap_sm.vertical_previous.output.law, delimiter);
  fmt::print(out, "{}{}", ap_sm.vertical_previous.output.H_c_ft, delimiter);
  fmt::print(out, "{}{}", ap_sm.vertical_previous.output.H_dot_c_fpm, delimiter);
  fmt::print(out, "{}{}", ap_sm.vertical_previous.output.FPA_c_deg, delimiter);
  fmt::print(out, "{}{}", ap_sm.vertical_previous.output.V_c_kn, delimiter);
  fmt::print(out, "{}{}", ap_sm.vertical_previous.output.mode_reversion_target_fpm, delimiter);
  fmt::print(out, "{}{}", ap_sm.vertical_previous.output.mode_reversion_TRK_FPA, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.output.ALT_soft_mode_active), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.output.EXPED_mode_active), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.output.FD_disconnect), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.output.TCAS_sub_mode), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.output.TCAS_sub_mode_compatible), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.output.TCAS_message_disarm), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.output.TCAS_message_RA_inhibit), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.vertical_previous.output.TCAS_message_TRK_FPA_deselection), delimiter);
  fmt::print(out, "{}{}", ap_sm.output.enabled_AP1, delimiter);
  fmt::print(out, "{}{}", ap_sm.output.enabled_AP2, delimiter);
  fmt::print(out, "{}{}", ap_sm.output.lateral_law, delimiter);
  fmt::print(out, "{}{}", ap_sm.output.lateral_mode, delimiter);
  fmt::print(out, "{}{}", ap_sm.output.lateral_mode_armed, delimiter);
  fmt::print(out, "{}{}", ap_sm.output.vertical_law, delimiter);
  fmt::print(out, "{}{}", ap_sm.output.vertical_mode, delimiter);
  fmt::print(out, "{}{}", ap_sm.output.vertical_mode_armed, delimiter);
  fmt::print(out, "{}{}", ap_sm.output.mode_reversion_lateral, delimiter);
  fmt::print(out, "{}{}", ap_sm.output.mode_reversion_vertical, delimiter);
  fmt::print(out, "{}{}", ap_sm.output.mode_reversion_vertical_target_fpm, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.output.mode_reversion_TRK_FPA), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.output.mode_reversion_triple_click), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.output.mode_reversion_fma), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.output.speed_protection_mode), delimiter);
  fmt::print(out, "{}{}", ap_sm.output.autothrust_mode, delimiter);
  fmt::print(out, "{}{}", ap_sm.output.Psi_c_deg, delimiter);
  fmt::print(out, "{}{}", ap_sm.output.H_c_ft, delimiter);
  fmt::print(out, "{}{}", ap_sm.output.H_dot_c_fpm, delimiter);
  fmt::print(out, "{}{}", ap_sm.output.FPA_c_deg, delimiter);
  fmt::print(out, "{}{}", ap_sm.output.V_c_kn, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.output.ALT_soft_mode_active), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.output.EXPED_mode_active), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.output.FD_disconnect), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.output.TCAS_message_disarm), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.output.TCAS_message_RA_inhibit), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_sm.output.TCAS_message_TRK_FPA_deselection), delimiter);
  fmt::print(out, "{}{}", ap_law.ap_on, delimiter);
  fmt::print(out, "{}{}", ap_law.Phi_loc_c, delimiter);
  fmt::print(out, "{}{}", ap_law.Nosewheel_c, delimiter);
  fmt::print(out, "{}{}", ap_law.flight_director.Theta_c_deg, delimiter);
  fmt::print(out, "{}{}", ap_law.flight_director.Phi_c_deg, delimiter);
  fmt::print(out, "{}{}", ap_law.flight_director.Beta_c_deg, delimiter);
  fmt::print(out, "{}{}", ap_law.autopilot.Theta_c_deg, delimiter);
  fmt::print(out, "{}{}", ap_law.autopilot.Phi_c_deg, delimiter);
  fmt::print(out, "{}{}", ap_law.autopilot.Beta_c_deg, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(ap_law.flare_law.condition_Flare), delimiter);
  fmt::print(out, "{}{}", ap_law.flare_law.H_dot_radio_fpm, delimiter);
  fmt::print(out, "{}{}", ap_law.flare_law.H_dot_c_fpm, delimiter);
  fmt::print(out, "{}{}", ap_law.flare_law.delta_Theta_H_dot_deg, delimiter);
  fmt::print(out, "{}{}", ap_law.flare_law.delta_Theta_bx_deg, delimiter);
  fmt::print(out, "{}{}", ap_law.flare_law.delta_Theta_bz_deg, delimiter);
  fmt::print(out, "{}{}", ap_law.flare_law.delta_Theta_beta_c_deg, delimiter);
  fmt::print(out, "{}{}", athr.data.nz_g, delimiter);
  fmt::print(out, "{}{}", athr.data.Theta_deg, delimiter);
  fmt::print(out, "{}{}", athr.data.Phi_deg, delimiter);
  fmt::print(out, "{}{}", athr.data.V_ias_kn, delimiter);
  fmt::print(out, "{}{}", athr.data.V_tas_kn, delimiter);
  fmt::print(out, "{}{}", athr.data.V_mach, delimiter);
  fmt::print(out, "{}{}", athr.data.V_gnd_kn, delimiter);
  fmt::print(out, "{}{}", athr.data.alpha_deg, delimiter);
  fmt::print(out, "{}{}", athr.data.H_ft, delimiter);
  fmt::print(out, "{}{}", athr.data.H_ind_ft, delimiter);
  fmt::print(out, "{}{}", athr.data.H_radio_ft, delimiter);
  fmt::print(out, "{}{}", athr.data.H_dot_fpm, delimiter);
  fmt::print(out, "{}{}", athr.data.ax_m_s2, delimiter);
  fmt::print(out, "{}{}", athr.data.ay_m_s2, delimiter);
  fmt::print(out, "{}{}", athr.data.az_m_s2, delimiter);
  fmt::print(out, "{}{}", athr.data.bx_m_s2, delimiter);
  fmt::print(out, "{}{}", athr.data.by_m_s2, delimiter);
  fmt::print(out, "{}{}", athr.data.bz_m_s2, delimiter);
  fmt::print(out, "{}{}", athr.data.Psi_magnetic_deg, delimiter);
  fmt::print(out, "{}{}", athr.data.Psi_magnetic_track_deg, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.data.on_ground), delimiter);
  fmt::print(out, "{}{}", athr.data.flap_handle_index, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.data.is_engine_operative_1), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.data.is_engine_operative_2), delimiter);
  fmt::print(out, "{}{}", athr.data.commanded_engine_N1_1_percent, delimiter);
  fmt::print(out, "{}{}", athr.data.commanded_engine_N1_2_percent, delimiter);
  fmt::print(out, "{}{}", athr.data.engine_N1_1_percent, delimiter);
  fmt::print(out, "{}{}", athr.data.engine_N1_2_percent, delimiter);
  fmt::print(out, "{}{}", athr.data.TAT_degC, delimiter);
  fmt::print(out, "{}{}", athr.data.OAT_degC, delimiter);
  fmt::print(out, "{}{}", athr.data.ISA_degC, delimiter);
  fmt::print(out, "{}{}", athr.data.ambient_density_kg_per_m3, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.data_computed.TLA_in_active_range), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.data_computed.is_FLX_active), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.data_computed.ATHR_push), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.data_computed.ATHR_disabled), delimiter);
  fmt::print(out, "{}{}", athr.data_computed.time_since_touchdown, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.data_computed.alpha_floor_inhibited), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.input.ATHR_push), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.input.ATHR_disconnect), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.input.is_TCAS_active), delimiter);
  fmt::print(out, "{}{}", athr.input.target_TCAS_RA_rate_fpm, delimiter);
  fmt::print(out, "{}{}", athr.input.TLA_1_deg, delimiter);
  fmt::print(out, "{}{}", athr.input.TLA_2_deg, delimiter);
  fmt::print(out, "{}{}", athr.input.V_c_kn, delimiter);
  fmt::print(out, "{}{}", athr.input.V_LS_kn, delimiter);
  fmt::print(out, "{}{}", athr.input.V_MAX_kn, delimiter);
  fmt::print(out, "{}{}", athr.input.thrust_limit_REV_percent, delimiter);
  fmt::print(out, "{}{}", athr.input.thrust_limit_IDLE_percent, delimiter);
  fmt::print(out, "{}{}", athr.input.thrust_limit_CLB_percent, delimiter);
  fmt::print(out, "{}{}", athr.input.thrust_limit_MCT_percent, delimiter);
  fmt::print(out, "{}{}", athr.input.thrust_limit_FLEX_percent, delimiter);
  fmt::print(out, "{}{}", athr.input.thrust_limit_TOGA_percent, delimiter);
  fmt::print(out, "{}{}", athr.input.flex_temperature_degC, delimiter);
  fmt::print(out, "{}{}", athr.input.mode_requested, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.input.is_mach_mode_active), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.input.alpha_floor_condition), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.input.is_approach_mode_active), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.input.is_SRS_TO_mode_active), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.input.is_SRS_GA_mode_active), delimiter);
  fmt::print(out, "{}{}", athr.input.thrust_reduction_altitude, delimiter);
  fmt::print(out, "{}{}", athr.input.thrust_reduction_altitude_go_around, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.input.is_anti_ice_wing_active), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.input.is_anti_ice_engine_1_active), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.input.is_anti_ice_engine_2_active), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.input.is_air_conditioning_1_active), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.input.is_air_conditioning_2_active), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.input.FD_active), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.input.ATHR_reset_disable), delimiter);
  fmt::print(out, "{}{}", athr.output.sim_throttle_lever_1_pos, delimiter);
  fmt::print(out, "{}{}", athr.output.sim_throttle_lever_2_pos, delimiter);
  fmt::print(out, "{}{}", athr.output.sim_thrust_mode_1, delimiter);
  fmt::print(out, "{}{}", athr.output.sim_thrust_mode_2, delimiter);
  fmt::print(out, "{}{}", athr.output.N1_TLA_1_percent, delimiter);
  fmt::print(out, "{}{}", athr.output.N1_TLA_2_percent, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.output.is_in_reverse_1), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.output.is_in_reverse_2), delimiter);
  fmt::print(out, "{}{}", athr.output.thrust_limit_type, delimiter);
  fmt::print(out, "{}{}", athr.output.thrust_limit_percent, delimiter);
  fmt::print(out, "{}{}", athr.output.N1_c_1_percent, delimiter);
  fmt::print(out, "{}{}", athr.output.N1_c_2_percent, delimiter);
  fmt::print(out, "{}{}", athr.output.status, delimiter);
  fmt::print(out, "{}{}", athr.output.mode, delimiter);
  fmt::print(out, "{}{}", athr.output.mode_message, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.output.thrust_lever_warning_flex), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(athr.output.thrust_lever_warning_toga), delimiter);
  fmt::print(out, "{}{}", fbw.sim.time.monotonic_time, delimiter);
  fmt::print(out, "{}{}", fbw.sim.time.dt, delimiter);
  fmt::print(out, "{}{}", fbw.sim.time.simulation_time, delimiter);
  fmt::print(out, "{}{}", fbw.sim.time.monotonic_time, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.nz_g, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.Theta_deg, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.Phi_deg, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.q_deg_s, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.r_deg_s, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.p_deg_s, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.qk_deg_s, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.rk_deg_s, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.pk_deg_s, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.qk_dot_deg_s2, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.rk_dot_deg_s2, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.pk_dot_deg_s2, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.psi_magnetic_deg, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.psi_true_deg, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.eta_deg, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.eta_trim_deg, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.xi_deg, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.zeta_deg, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.zeta_trim_deg, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.alpha_deg, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.beta_deg, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.beta_dot_deg_s, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.V_ias_kn, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.V_tas_kn, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.V_mach, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.H_ft, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.H_ind_ft, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.H_radio_ft, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.CG_percent_MAC, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.total_weight_kg, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.gear_strut_compression_0, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.gear_strut_compression_1, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.gear_strut_compression_2, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.flaps_handle_index, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.spoilers_left_pos, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.spoilers_right_pos, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.autopilot_master_on, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.slew_on, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.pause_on, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.tracking_mode_on_override, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.autopilot_custom_on, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.autopilot_custom_Theta_c_deg, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.autopilot_custom_Phi_c_deg, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.autopilot_custom_Beta_c_deg, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.simulation_rate, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.ice_structure_percent, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.linear_cl_alpha_per_deg, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.alpha_stall_deg, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.alpha_zero_lift_deg, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.ambient_density_kg_per_m3, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.ambient_pressure_mbar, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.ambient_temperature_celsius, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.ambient_wind_x_kn, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.ambient_wind_y_kn, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.ambient_wind_z_kn, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.ambient_wind_velocity_kn, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.ambient_wind_direction_deg, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.total_air_temperature_celsius, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.latitude_deg, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.longitude_deg, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.engine_1_thrust_lbf, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.engine_2_thrust_lbf, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.thrust_lever_1_pos, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data.thrust_lever_2_pos, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data_computed.on_ground, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data_computed.tracking_mode_on, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data_computed.high_aoa_prot_active, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data_computed.alpha_floor_command, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data_computed.protection_ap_disc, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data_computed.high_speed_prot_active, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data_computed.high_speed_prot_low_kn, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data_computed.high_speed_prot_high_kn, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data_speeds_aoa.v_alpha_max_kn, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data_speeds_aoa.alpha_max_deg, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data_speeds_aoa.v_alpha_prot_kn, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data_speeds_aoa.alpha_prot_deg, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data_speeds_aoa.alpha_floor_deg, delimiter);
  fmt::print(out, "{}{}", fbw.sim.data_speeds_aoa.alpha_filtered_deg, delimiter);
  fmt::print(out, "{}{}", fbw.sim.input.delta_eta_pos, delimiter);
  fmt::print(out, "{}{}", fbw.sim.input.delta_xi_pos, delimiter);
  fmt::print(out, "{}{}", fbw.sim.input.delta_zeta_pos, delimiter);
  fmt::print(out, "{}{}", fbw.pitch.data_computed.eta_trim_deg_limit_lo, delimiter);
  fmt::print(out, "{}{}", fbw.pitch.data_computed.eta_trim_deg_limit_up, delimiter);
  fmt::print(out, "{}{}", fbw.pitch.data_computed.delta_eta_deg, delimiter);
  fmt::print(out, "{}{}", fbw.pitch.data_computed.in_flight, delimiter);
  fmt::print(out, "{}{}", fbw.pitch.data_computed.in_rotation, delimiter);
  fmt::print(out, "{}{}", fbw.pitch.data_computed.in_flare, delimiter);
  fmt::print(out, "{}{}", fbw.pitch.data_computed.in_flight_gain, delimiter);
  fmt::print(out, "{}{}", fbw.pitch.data_computed.in_rotation_gain, delimiter);
  fmt::print(out, "{}{}", fbw.pitch.data_computed.nz_limit_up_g, delimiter);
  fmt::print(out, "{}{}", fbw.pitch.data_computed.nz_limit_lo_g, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(fbw.pitch.data_computed.eta_trim_deg_should_freeze), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(fbw.pitch.data_computed.eta_trim_deg_reset), delimiter);
  fmt::print(out, "{}{}", fbw.pitch.data_computed.eta_trim_deg_reset_deg, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(fbw.pitch.data_computed.eta_trim_deg_should_write), delimiter);
  fmt::print(out, "{}{}", fbw.pitch.data_computed.eta_trim_deg_rate_limit_up_deg_s, delimiter);
  fmt::print(out, "{}{}", fbw.pitch.data_computed.eta_trim_deg_rate_limit_lo_deg_s, delimiter);
  fmt::print(out, "{}{}", fbw.pitch.data_computed.flare_Theta_deg, delimiter);
  fmt::print(out, "{}{}", fbw.pitch.data_computed.flare_Theta_c_deg, delimiter);
  fmt::print(out, "{}{}", fbw.pitch.data_computed.flare_Theta_c_rate_deg_s, delimiter);
  fmt::print(out, "{}{}", fbw.pitch.law_rotation.qk_c_deg_s, delimiter);
  fmt::print(out, "{}{}", fbw.pitch.law_rotation.eta_deg, delimiter);
  fmt::print(out, "{}{}", fbw.pitch.law_normal.nz_c_g, delimiter);
  fmt::print(out, "{}{}", fbw.pitch.law_normal.Cstar_g, delimiter);
  fmt::print(out, "{}{}", fbw.pitch.law_normal.protection_alpha_c_deg, delimiter);
  fmt::print(out, "{}{}", fbw.pitch.law_normal.protection_V_c_kn, delimiter);
  fmt::print(out, "{}{}", fbw.pitch.law_normal.eta_dot_deg_s, delimiter);
  fmt::print(out, "{}{}", fbw.pitch.vote.eta_dot_deg_s, delimiter);
  fmt::print(out, "{}{}", fbw.pitch.integrated.eta_deg, delimiter);
  fmt::print(out, "{}{}", fbw.pitch.output.eta_deg, delimiter);
  fmt::print(out, "{}{}", fbw.pitch.output.eta_trim_deg, delimiter);
  fmt::print(out, "{}{}", fbw.roll.data_computed.delta_xi_deg, delimiter);
  fmt::print(out, "{}{}", fbw.roll.data_computed.delta_zeta_deg, delimiter);
  fmt::print(out, "{}{}", fbw.roll.data_computed.in_flight, delimiter);
  fmt::print(out, "{}{}", fbw.roll.data_computed.in_flight_gain, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(fbw.roll.data_computed.zeta_trim_deg_should_write), delimiter);
  fmt::print(out, "{}{}", fbw.roll.data_computed.beta_target_deg, delimiter);
  fmt::print(out, "{}{}", fbw.roll.law_normal.pk_c_deg_s, delimiter);
  fmt::print(out, "{}{}", fbw.roll.law_normal.Phi_c_deg, delimiter);
  fmt::print(out, "{}{}", fbw.roll.law_normal.xi_deg, delimiter);
  fmt::print(out, "{}{}", fbw.roll.law_normal.zeta_deg, delimiter);
  fmt::print(out, "{}{}", fbw.roll.law_normal.zeta_tc_yd_deg, delimiter);
  fmt::print(out, "{}{}", fbw.roll.output.xi_deg, delimiter);
  fmt::print(out, "{}{}", fbw.roll.output.zeta_deg, delimiter);
  fmt::print(out, "{}{}", fbw.roll.output.zeta_trim_deg, delimiter);
  fmt::print(out, "{}{}", fbw.output.eta_pos, delimiter);
  fmt::print(out, "{}{}", fbw.output.eta_trim_deg, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(fbw.output.eta_trim_deg_should_write), delimiter);
  fmt::print(out, "{}{}", fbw.output.xi_pos, delimiter);
  fmt::print(out, "{}{}", fbw.output.zeta_pos, delimiter);
  fmt::print(out, "{}{}", fbw.output.zeta_trim_pos, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(fbw.output.zeta_trim_pos_should_write), delimiter);
  fmt::print(out, "{}{}", engine.simOnGround, delimiter);
  fmt::print(out, "{}{}", engine.generalEngineElapsedTime_1, delimiter);
  fmt::print(out, "{}{}", engine.generalEngineElapsedTime_2, delimiter);
  fmt::print(out, "{}{}", engine.standardAtmTemperature, delimiter);
  fmt::print(out, "{}{}", engine.turbineEngineCorrectedFuelFlow_1, delimiter);
  fmt::print(out, "{}{}", engine.turbineEngineCorrectedFuelFlow_2, delimiter);
  fmt::print(out, "{}{}", engine.fuelTankCapacityAuxLeft, delimiter);
  fmt::print(out, "{}{}", engine.fuelTankCapacityAuxRight, delimiter);
  fmt::print(out, "{}{}", engine.fuelTankCapacityMainLeft, delimiter);
  fmt::print(out, "{}{}", engine.fuelTankCapacityMainRight, delimiter);
  fmt::print(out, "{}{}", engine.fuelTankCapacityCenter, delimiter);
  fmt::print(out, "{}{}", engine.fuelTankQuantityAuxLeft, delimiter);
  fmt::print(out, "{}{}", engine.fuelTankQuantityAuxRight, delimiter);
  fmt::print(out, "{}{}", engine.fuelTankQuantityMainLeft, delimiter);
  fmt::print(out, "{}{}", engine.fuelTankQuantityMainRight, delimiter);
  fmt::print(out, "{}{}", engine.fuelTankQuantityCenter, delimiter);
  fmt::print(out, "{}{}", engine.fuelTankQuantityTotal, delimiter);
  fmt::print(out, "{}{}", engine.fuelWeightPerGallon, delimiter);
  fmt::print(out, "{}{}", engine.engineEngine1N2, delimiter);
  fmt::print(out, "{}{}", engine.engineEngine2N2, delimiter);
  fmt::print(out, "{}{}", engine.engineEngine1N1, delimiter);
  fmt::print(out, "{}{}", engine.engineEngine2N1, delimiter);
  fmt::print(out, "{}{}", engine.engineEngineIdleN1, delimiter);
  fmt::print(out, "{}{}", engine.engineEngineIdleN2, delimiter);
  fmt::print(out, "{}{}", engine.engineEngineIdleFF, delimiter);
  fmt::print(out, "{}{}", engine.engineEngineIdleEGT, delimiter);
  fmt::print(out, "{}{}", engine.engineEngine1EGT, delimiter);
  fmt::print(out, "{}{}", engine.engineEngine2EGT, delimiter);
  fmt::print(out, "{}{}", engine.engineEngine1Oil, delimiter);
  fmt::print(out, "{}{}", engine.engineEngine2Oil, delimiter);
  fmt::print(out, "{}{}", engine.engineEngine1TotalOil, delimiter);
  fmt::print(out, "{}{}", engine.engineEngine2TotalOil, delimiter);
  fmt::print(out, "{}{}", engine.engineEngine1FF, delimiter);
  fmt::print(out, "{}{}", engine.engineEngine2FF, delimiter);
  fmt::print(out, "{}{}", engine.engineEngine1PreFF, delimiter);
  fmt::print(out, "{}{}", engine.engineEngine2PreFF, delimiter);
  fmt::print(out, "{}{}", engine.engineEngineImbalance, delimiter);
  fmt::print(out, "{}{}", engine.engineFuelUsedLeft, delimiter);
  fmt::print(out, "{}{}", engine.engineFuelUsedRight, delimiter);
  fmt::print(out, "{}{}", engine.engineFuelLeftPre, delimiter);
  fmt::print(out, "{}{}", engine.engineFuelRightPre, delimiter);
  fmt::print(out, "{}{}", engine.engineFuelAuxLeftPre, delimiter);
  fmt::print(out, "{}{}", engine.engineFuelAuxRightPre, delimiter);
  fmt::print(out, "{}{}", engine.engineFuelCenterPre, delimiter);
  fmt::print(out, "{}{}", engine.engineEngineCycleTime, delimiter);
  fmt::print(out, "{}{}", engine.engineEngine1State, delimiter);
  fmt::print(out, "{}{}", engine.engineEngine2State, delimiter);
  fmt::print(out, "{}{}", engine.engineEngine1Timer, delimiter);
  fmt::print(out, "{}{}", engine.engineEngine2Timer, delimiter);
  fmt::print(out, "{}{}", data.master_warning_active, delimiter);
  fmt::print(out, "{}{}", data.master_caution_active, delimiter);
  fmt::print(out, "{}{}", data.park_brake_lever_pos, delimiter);
  fmt::print(out, "{}{}", data.brake_pedal_left_pos, delimiter);
  fmt::print(out, "{}{}", data.brake_pedal_right_pos, delimiter);
  fmt::print(out, "{}{}", data.brake_left_sim_pos, delimiter);
  fmt::print(out, "{}{}", data.brake_right_sim_pos, delimiter);
  fmt::print(out, "{}{}", data.autobrake_armed_mode, delimiter);
  fmt::print(out, "{}{}", data.autobrake_decel_light, delimiter);
  fmt::print(out, "{}{}", data.spoilers_handle_pos, delimiter);
  fmt::print(out, "{}{}", data.spoilers_armed, delimiter);
  fmt::print(out, "{}{}", data.spoilers_handle_sim_pos, delimiter);
  fmt::print(out, "{}{}", data.ground_spoilers_active, delimiter);
  fmt::print(out, "{}{}", data.flaps_handle_percent, delimiter);
  fmt::print(out, "{}{}", data.flaps_handle_index, delimiter);
  fmt::print(out, "{}{}", data.flaps_handle_configuration_index, delimiter);
  fmt::print(out, "{}{}", data.flaps_handle_sim_index, delimiter);
  fmt::print(out, "{}{}", data.gear_handle_pos, delimiter);
  fmt::print(out, "{}{}", data.hydraulic_green_pressure, delimiter);
  fmt::print(out, "{}{}", data.hydraulic_blue_pressure, delimiter);
  fmt::print(out, "{}{}", data.hydraulic_yellow_pressure, delimiter);
  fmt::print(out, "{}{}", data.throttle_lever_1_pos, delimiter);
  fmt::print(out, "{}{}", data.throttle_lever_2_pos, delimiter);
  fmt::print(out, "{}{}", data.corrected_engine_N1_1_percent, delimiter);
  fmt::print(out, "{}{}", data.corrected_engine_N1_2_percent, delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(data.assistanceTakeoffEnabled), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(data.assistanceLandingEnabled), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(data.aiAutoTrimActive), delimiter);
  fmt::print(out, "{}{}", static_cast<unsigned int>(data.aiControlsActive), delimiter);
  fmt::print(out, "{}{}", data.realisticTillerEnabled, delimiter);
  fmt::print(out, "{}{}", data.tillerHandlePosition, delimiter);
  fmt::print(out, "{}{}", data.noseWheelPosition, delimiter);
  fmt::print(out, "\n");
}
